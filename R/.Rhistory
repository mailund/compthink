x <- seq(1,1, length.out = 100)
x <- seq(1,100, length.out = 100)
const <- tibble(x = x, time = 1)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
log <- tibble(x = x, time = log(x))
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
ggplot(times, aes(x = x, y = time, linetype = growth)) +
geom_line()
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
fast %>% plot_time()
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
slow %>% plot_time()
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
slow %>% plot_time()
quad
veryslow %>% plot_time()
quad %>% plot_time()
veryslow %>% plot_time()
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
fast %>% plot_time()
slow %>% plot_time()
veryslow %>% plot_time()
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
(fast %>% plot_time()) + (slow %>% plot_time()) + (slower %>% plot_time()) + (veryslow %>% plot_time())
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
fast <- rbind(const, log, lin, loglin) %>% mutate(
growth = as.factor(growth, levels = c("Constant", "Logarithmic", "linear", "Log-linear"))
)
fast <- rbind(const, log, lin, loglin) %>% mutate(
growth = factor(growth, levels = c("Constant", "Logarithmic", "linear", "Log-linear"))
)
fast <- rbind(const, log, lin, loglin) %>% mutate(
growth = factor(growth, levels = c("Constant", "Logarithmic", "linear", "Log-linear"))
)
fast %>% plot_time()
fast <- rbind(const, log, lin, loglin) %>% mutate(
growth = factor(growth, levels = c("Constant", "Logarithmic", "Linear", "Log-linear"))
)
fast %>% plot_time()
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/function-growth.R', echo=TRUE)
ggsave("../function-growth.pdf")
ggsave("../function-growth.pdf", width = 5, height = 3)
ggsave("../function-growth.pdf", width = 10, height = 5)
ggsave("../figures/function-growth.pdf", width = 10, height = 5)
source('~/.active-rstudio-document', echo=TRUE)
?gather
df %>% gather(key = "operation", value = "count", comparisons, swaps)
ggplot(df, aes(x = n, y = count)) +
geom_point()
df
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(df, aes(x = n, y = count, shape = alg)) +
geom_point()
ggplot(df, aes(x = n, y = count, shape = alg)) +
geom_point() +
geom_smooth()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
geom_point() +
geom_smooth()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid( ~ operation) +
geom_point() +
geom_smooth()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(data ~ operation) +
geom_point() +
geom_smooth()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data) +
geom_point() +
geom_smooth()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_point() +
geom_smooth()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_point() +
geom_smooth(se = FALSE)
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_point() +
geom_smooth(se = FALSE) +
theme_minimal()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_jitter() +
geom_smooth(se = FALSE) +
theme_minimal()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
theme_minimal()
ggplot(df, aes(x = n, y = count, shape = alg, linetype = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_jitter(width = 1) +
geom_smooth(se = FALSE, colour = "darkgrey") +
theme_minimal()
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y") +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal()
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = label_both()) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = label_both) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
?as_labeller
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = labeller(capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = labeller(capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
capitalize <- function(string) {
substr(string, 1, 1) <- toupper(substr(string, 1, 1))
string
}
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = labeller(capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = labeller(data = capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = labeller(both = capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y", labeller = labeller(data = capitalize, operation = capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
capitalize <- function(string) {
substr(string, 1, 1) <- toupper(substr(string, 1, 1))
string
}
data_map <- c(almost_sorted = "Almost Sorted", permuted = "Random Permutation", sorted = "Sorted")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
geom_smooth(se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(aes(y = y1),method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(aes(y = y),method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = count ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = count ~ n + I(n^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
df %>% select(data == "reversed")
df
head(df)
df %>% select(data == "reversed")
df %>% filter(data == "reversed")
df %>% filter(data == "reversed", operation == "comparison")
df %>% filter(data == "reversed", operation == "comparisons")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data + alg, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts")
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation ~ data + alg, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation + alg ~ data, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation + data ~ alg, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation + data ~ alg, scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
ggplot(df, aes(x = n, y = count, colour = alg)) +
facet_grid(operation + data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
df %>% filter(operation == "comparisons") %>% ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
df %>% filter(operation == "swaps") %>% ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none"
)
source('~/Dropbox/Misc. writing/Books/Computational Thinking/R/quadratic-sort-comparison.R', echo=TRUE)
df %>% filter(operation == "comparisons", data = "sorted")
df %>% filter(operation == "comparisons", data == "sorted")
df %>% filter(operation == "comparisons", data == "sorted", alg = "insertion")
df %>% filter(operation == "comparisons", data == "sorted", alg == "insertion")
df %>% filter(operation == "swaps", data == "sorted", alg != "selection")
df %>% filter(operation == "swaps", data == "almost_sorted", alg != "selection")
df %>% filter(operation == "swaps", data == "almost_sorted", alg != "selection") %>% head
df %>% filter(operation == "swaps", data == "almost_sorted", alg != "selection") %>% head(20)
df %>% filter(operation == "swaps", data == "reversed", alg != "selection") %>% head(20)
