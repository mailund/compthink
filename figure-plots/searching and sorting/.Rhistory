theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Arial"),
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Comics San"),
)
library(extrafont)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Comics San"),
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Decima WE")
)
font_import(paths = "~/.local/share/fonts/",prompt = F)
fonttable()
font_import()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Decima WE")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "/Bradley Hand Bold")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
)
ggsave("../figures/quadratic-sort-comparison-swaps.pdf", width = 10, height = 10)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 10, height = 10)
loadfonts()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 10, height = 10)
pdf("font_plot.pdf", family="Bradley Hand Bold", width=4, height=4)
pdf("font_plot.pdf", family="Bradley Hand Bold", width=4, height=4)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
)
loadfonts()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Comic Sans MS")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 10, height = 10)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Comic Sans MS")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 5, height = 5)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
#text = element_text(family = "Comic Sans MS")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Comic Sans MS")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
pdfFonts()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Noteworthy")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Noteworthy Bold")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
loadfonts()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Fira Code Retina")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Khmer Sangam MN")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Arial Black")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Cambria")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
#text = element_text(family = "Cambria")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Verdana")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
pdf.options()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
#text = element_text(family = "Verdana")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Verdana")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Noteworthy")
)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Noteworthy Light")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
#text = element_text(family = "Noteworthy Light")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
fonts()
?fonts
extrafont::fonttable()
loadfonts()
library(dplyr)
library(ggplot2)
library(tidyr)
library(magrittr)
library(extrafont)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
text = element_text(family = "Bradley Hand Bold")
#text = element_text(family = "Noteworthy Light")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
loadfonts()
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
warnings()
loadfonts(device = "postscript")
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
warnings()
fonts()
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Luminari")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
df %>% filter(operation == "comparisons") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",text = element_text(family = "Luminari")
)
ggsave("quadratic-sort-comparison-comparisons.pdf", width = 10, height = 10)
df %>% filter(operation == "swaps") %>%
ggplot(aes(x = n, y = count, colour = alg)) +
facet_grid(data ~ alg, #scales = "free_y",
labeller = labeller(data = data_map, operation = capitalize, alg = capitalize)) +
geom_jitter(width = 1, height = 0) +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1, se = FALSE) +
scale_color_grey("Algorithm") +
theme_minimal() + xlab("Input size") + ylab("Counts") + theme(
legend.position = "none",
#text = element_text(family = "Bradley Hand Bold")
text = element_text(family = "Luminari")
)
ggsave("quadratic-sort-comparison-swaps.pdf", width = 6, height = 6)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Books/Computational Thinking/figure-plots/searching and sorting/function-growth.R', echo=TRUE)
install.packages()
install.packages("patchwork")
install.packages("devtools")
devtools::install_github("thomasp85/patchwork")
library(magrittr)
library(tibble)
library(ggplot2)
library(dplyr)
library(patchwork)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Books/Computational Thinking/figure-plots/searching and sorting/function-growth.R', echo=TRUE)
ggsave("function-growth.pdf", width = 10, height = 5)
library(ggplot2)
library(tibble)
d <- tribble(
~repr,             ~number,
"1.1[2] %*% 2^-11[2]", 2**-3 + 2**-4,
"1.0[2] %*% 2^-11[2]", 2**-3,
"1.1[2] %*% 2^-10[2]", 2**-2 + 2**-3,
"1.0[2] %*% 2^-10[2]", 2**-2,
"1.1[2] %*% 2^-01[2]", 2**-1 + 2**-2,
"1.0[2] %*% 2^-01[2]", 2**-1,
"1.0[2] %*% 2^00[2]",   1,
"1.1[2] %*% 2^00[2]",   1 + 2**-1,
"0.0[2] %*% 2^00[2]",   0,
"1.1[2] %*% 2^01[2]",   2 + 1,
"1.0[2] %*% 2^01[2]",   2,
"1.1[2] %*% 2^10[2]",   2**2 + 2**1,
"1.0[2] %*% 2^10[2]",   2**2,
"1.1[2] %*% 2^11[2]",   2**3 + 2**2,
"1.0[2] %*% 2^11[2]",   2**3,
"-1.1[2] %*% 2^-11[2]", -(2**-3 + 2**-4),
"-1.0[2] %*% 2^-11[2]", -(2**-3),
"-1.1[2] %*% 2^-10[2]", -(2**-2 + 2**-3),
"-1.0[2] %*% 2^-10[2]", -(2**-2),
"-1.1[2] %*% 2^-01[2]", -(2**-1 + 2**-2),
"-1.0[2] %*% 2^-01[2]", -(2**-1),
"-1.0[2] %*% 2^00[2]",   -1,
"-1.1[2] %*% 2^00[2]",   -(1 + 2**-1),
"-1.1[2] %*% 2^01[2]",  -(2 + 1),
"-1.0[2] %*% 2^01[2]",  -2,
"-1.1[2] %*% 2^10[2]",  -(2**2 + 2**1),
"-1.0[2] %*% 2^10[2]",  -2**2,
"-1.1[2] %*% 2^11[2]",  -(2**3 + 2**2),
"-1.0[2] %*% 2^11[2]",  -2**3
)
d <- d[order(d$number),]
d$i <- seq(min(d$number), max(d$number), length.out = nrow(d))
ggplot() +
geom_point(
data = d,
mapping = aes(y = 0, x = number),
size = 0.1
) +
geom_text(
data = d,
mapping = aes(y = 0.01, x = i, label = repr),
parse = TRUE, hjust = 0, vjust = 0.5, angle = 55, size = 3
) +
geom_segment(
data = d,
mapping = aes(y = 0, yend = 0.01, x = number, xend = i),
size = 0.1
) +
scale_x_continuous(
breaks = c(-12, -8, -6, -4, -3, -2, -1, 0, 1, 2, 3, 4, 6, 8, 12)
) +
coord_cartesian(ylim = c(-0.0, 0.015)) +
theme_classic(base_size = 14) +
labs(x = NULL, y = NULL) +
theme(
axis.line.x = element_line(size = 0.2),
axis.ticks.x = element_line(size = 0.2),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()
)
ggplot() +
geom_point(
data = d,
mapping = aes(y = 0, x = number),
size = 0.1
) +
geom_text(
data = d,
mapping = aes(y = 0.01, x = i, label = repr),
parse = TRUE, hjust = 0, vjust = 0.5, angle = 55, size = 3
) +
geom_segment(
data = d,
mapping = aes(y = 0, yend = 0.01, x = number, xend = i),
size = 0.1
) +
scale_x_continuous(
breaks = c(-12, -8, -6, -4, -3, -2, -1, 0, 1, 2, 3, 4, 6, 8, 12)
) +
coord_cartesian(ylim = c(-0.0, 0.015)) +
theme_classic(base_size = 14) +
labs(x = NULL, y = NULL) +
theme(
axis.line.x = element_line(size = 0.2),
axis.ticks.x = element_line(size = 0.2),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
text = element_text(family = "Luminari")
)
ggsave("../figures/number-line.pdf", width = 10, height = 6)
ggsave("number-line.pdf", width = 10, height = 6)
library(tidyverse)
tbl <- read_table2("fib-memo.txt")
ggplot(tbl) +
geom_line(aes(x = n, y = count)) +
theme_minimal(text = element_text(family = "Luminari"))
tbl <- read_table2("fib-memo.txt")
