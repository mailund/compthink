# Recursion and “divide and conquer”

In this chapter we explore two powerful techniques for designing algorithms: *recursion* and *divide and conquer*. These are really two sides of the same coin, and can be described as “solve a problem by breaking it down to smaller subproblems that we can solve recursively”. The first part is how we would describe all algorithms. The “recursively” part is where these techniques differ—and I am aware that I am defining *recursion* using *recursively*, which is ironic considering what recursion is. We get to that in the next section. Purist might consider the two terms as different, considering recursion a programming construction where a function will call itself and consider divide and conquer the algorithmic trick of solving a problem by splitting into subproblems of the same kind—perhaps using recursive functions and perhaps not. I will not make this distinction, but I will present the idea of recursion first and then classical divide and conquer algorithms after that.

## Recursion

Recursion means defining something in terms of itself, and you have no-doubt seen recursive definitions before, even if they were not explained as such. A classical example is the factorial of a number $n!$. The factorial is usually defined as this:

$$n! = \begin{cases}
 1 & n=1 \\
 n\times(n-1)! & \text{otherwise}
\end{cases}$$

The *Fibonacci* numbers can be defined as this:

$$F(n) = \begin{cases}
0 & n = 0 \\
1 & n = 1 \\
F(n-1) + F(n-2) & \text{otherwise}
\end{cases}$$

The pattern we see for these definitions is that we define the value for a number, $n$, as either a fixed constant or some expression that involves the function we are defining itself, applied to some smaller number. The cases where we can get a result immediately from the definition are called *base cases*. For factorial, the base case is $n=1$ where we can immediately get the value 1. For Fibonacci numbers, the base cases are $n=0$ and $n=1$, where we immediately can get the values 0 and 1, respectively. The other cases are called the *recursive cases*.

One way of defining natural numbers is also recursive. It goes like this: 0 is a natural number and whenever $n$ is a natural number then so is $n+1$. This definition looks like it works in the opposite direction as the others, since it goes from $n$ to $n+1$, but looks can be deceiving. We can rewrite the recursion

$$\begin{cases}
n\in\mathbb{N} & n=0 \\
n\in\mathbb{N} & n-1\in\mathbb{N}
\end{cases}$$

For a recursive definition to be well-defined, the recursive cases must express a value in terms of recursions on values that are closer to the base cases, in some order. We cannot define the natural numbers like this:

$$\begin{cases}
n\in\mathbb{N} & n=0 \\
n\in\mathbb{N} & n+1\in\mathbb{N}
\end{cases}$$

If we want to check if 4 is a natural number, we would first need to check if 5 is, to answer that we need to consider 6, and so forth to infinity. By defining natural numbers in the original way, we would check 4, then 3, then 2, then 1, and then reach a base case, 0, after which we would have our answer. Recursive definitions are self-referential but must be so in a way where recursive cases move you closer to base cases.

Because recursion is self-referential in this way, a comic definition of recursion is this:

>	Recursion, *see Recursion.*

The more useful definition of recursion is definitions where we have one or more base cases and one or more formulae that covers all other cases with references to the definition itself.

Strictly speaking, this would be a definition of *recursive definitions*, but it works equally well when we consider computational problems. We have a recursive algorithm when we have some base cases where we can get the solution immediately, and some rules for solving all other cases by solving the same problem on smaller parts of the input.

### Recursive functions

You have already used recursion, defined in this way, several times in the previous chapters. We just didn’t call it recursion then.^[Again, purists would not consider these algorithms recursive. They would reserve that word for when we use recursive functions. I would argue that they *are* recursive algorithms. I would actually argue that *most* algorithms are recursive; it is not always helpful to think of them as such, but recursion is often the way to think about solving a problem in the first place.] Consider linear search. When we search through a list `x`, if we have reached the end of the list without finding the element we are searching for, we are done and can report that the element is not in the list. Otherwise, we look at the first element in the list, and if that is the element we are looking for we are done and can report that we found it. These two cases are the base cases. Otherwise, we do a linear search in the remainder of the list. That is the recursive case.

We can make the recursive nature of linear search more explicit by defining a *recursive function:*

```python
def linear_search(x, e, i = 0):
	if i == len(x):
		return False
	if e == x[i]:
		return True
	else:
		return linear_search(x, e, i + 1)
```

This does exactly what we described above. There are two base cases and one recursive case. For the function, the recursive case is handled by calling the function itself.

This version of linear search is, obviously, much more complex than the one we had before, and I do not recommend that you use this version instead of simply iterating through `x`. You should, however, be able to convince yourself that it does the same thing.

The only difference between a recursive definition and a recursive function in Python is that the former defines something while the latter actually computes something. There is no other difference. For example, we can write a function for computing—as opposed to defining—the factorial of a number like this:

```python
def factorial(n):
	if n == 1:
		return 1
	else:
		return n * factorial(n - 1)
```

**Exercise:** Implement a recursive function that computes the n’th Fibonacci number.

Binary search is another example of a recursive algorithm. In this algorithm, we either have an empty interval to search in, in which case we can report `False`. Or, we have the element we are searching for in the middle of the interval, in which case we can report `True`. Or, the recursive case, we search in the lower or the higher half of the interval.

Again, we can be more explicit in defining this as a recursive computation by implementing it as a recursive function:

```python
def bsearch(x, e, low = 0, high = len(x)):
	if low >= high:
		return False
	mid = (low + high) // 2
	if x[mid] == e:
		return True
	elif x[mid] < e:
		return bsearch(x, e, mid + 1, high)
	else:
		return bsearch(x, e, low, mid)
```

You should convince yourself that this, indeed, does the same as the binary search we have seen earlier.

If you recall, we required of recursive definitions that the recursive cases must move us closer to base cases. If we consider recursive computations, this requirement relates to termination. If each recursive call moves us closer to a base case—whatever that means—then the computation will eventually terminate. If not, then there is no such guarantee. Termination functions is one way to guarantee that a recursive computation will eventually provide an answer. We have seen them used to prove that loops will terminate; the idea is exactly the same for recursive functions.

For binary search, the termination function was `high - low`. This works equally well for the iterative version we have seen earlier as for the recursive function defined above. We didn’t use a termination function for our earlier implementation of linear search; we didn’t need one because we know that a `for`-loop over a finite sequence will terminate. For the recursive case, we cannot make as simple an argument, but of course the situation is the same. In each recursive call, the index `i` gets closer to the end of `x`. So, we can use as termination function `len(x)-i`.

Some people find recursion a difficult concept, especially when we use recursion for computation. Most people do not have any problem with accepting recursive definitions, but when we solve a problem by solving the exact same problem it feels like a circular definition. “For recursion, see recursion”. It isn’t, however, and the reason is that we never solve a problem by trying to solve exactly the same problem. We solve a problem that is closer to a base case; our termination function decreases with every recursive function call.

If you still find recursive functions hard to wrap your mind around, you might take comfort in knowing that early computer scientist did as well. Early programming languages could not define recursive functions. It simply didn’t occur to people that this might be useful. This doesn’t mean that they didn’t solve problems recursively; they just didn’t use recursive functions. Just like we did linear and binary search without recursive functions before we reformulated the algorithms as recursive. Recursion is such a powerful technique, however, that all modern languages support it. Some even go so far that they have replaced loops with recursion entirely; they will not let you implement loops at all, only recursive functions.

### Recursion stacks

To understand how recursive functions work, we first need to understand a little deeper how function calls work. Recall that we have two different kinds of variables in Python, global and local variables.^[There are a bit more to variables than this, but we do not need to worry about that for now. Global and local variables are all we have seen so far.] Global variables are those we assign to at the outermost level in a Python program while local variables are either function parameters or variables we assign to inside a function. For example, in this program

```python
x = 2
def add_one(x):
	return x + 1
add_one(2 * x)
```

We have two global variables, `x` and `add_one`. The `x` variable is one we have defined by assigning to `x`. The `add_one` is a function we have defined, but it is also a variable, and we can access the function through its name, `add_one`. Inside the `add_one` function we have the parameter `x`, and this is distinct from the global variable `x`. The two variables have the same name, but they are two different variables. Inside `add_one`, `x` refers to the local variable, outside of `add_one`, `x` refers to the global variable. When we call `add_one(2 * x)` we look up the name `add_one` and find the function and before we call it, we must evaluate the expression we provide as its argument, that is, we must evaluate `2 * x`. Since we call `add_one` in at the outermost level, the global scope, the `x` variable is the global variable. That holds the value 2, so `2 * x` is 4. We then call `add_one` and set the parameter `x`, the local variable, to 4. This does not change the global variable, that variable is still 2. When we return `x + 1`, we use the value of the local variable, which is 4, so we return 5.

You should be comfortable with the difference between global and local variables by now, but what happens when a function calls itself, as we did with the factorial function.

```python
def factorial(n):
	if n == 1:
		return 1
	else:
		return n * factorial(n - 1)
```

When we call 

```python
factorial(4)
```

the local variable, `n`, gets set to 4. No problem there. But then we call `factorial` with `n - 1` to evaluate `n * factorial(n - 1)`. This sets the local variable to 3, but we still need it to be for when we multiply the result of `factorial(n - 1)` by `n` after the recursive call. We need the local variable to be both four and three in the recursive case. How is that achieved?

This is something early programming languages couldn’t handle. In such early languages, local variables were tied to functions—each function had memory locations reserved for their local variables, and those were modified in function calls. If you called the same function twice, you would overwrite the memory locations assigned to the local variables. This isn’t a problem if you do not use recursion, but it clearly is if you do. You cannot use the same memory location to hold both $n=4$ and $n=3$.

The solution to this problem is very elegant in its simplicity: instead of reserving memory for local variables for each function, you reserve memory for local variables for each function *call*. The memory locations you need for local variables are not hardwired in the program but will be allocated when you call a function. This memory is allocated on a so-called *call stack*, and it works as follows. You have a piece of your computer’s memory set aside for this stack. You keep track of the top of the stack, and the function call you are currently executing has access to the top of the stack but not the rest of the stack. When you call a function, Python will reserve memory for the variables used in the function at the top of the stack. The memory set aside in this way is known as a function’s *call frame*, but what we call it is not important. What is important is that we have it.

Consider the call

```python
factorial(4)
```

at the outermost level. When we are at the outermost level, the call stack is empty. When we make the function call, Python puts two things on the call stack and increases the call stack pointer. What the call stack remembers is the function argument and where it should return to when in the program when we return from the function. The way Python actually handles local variables is a little different—it doesn’t reserve memory for each variable in this way—but it is very similar. The same goes for how return values are handled. The description here is conceptually true for how call stacks work, but the actual implementation is slightly different.

The stack needs to contain both the local variables and the return location. The local variables so we can have different instances of the same function and the return location so we know where the program should continue from when we return. It is because we remember this return location that we can call the same function from different places in a program and return to where we called the function once we are done with it. In old programming languages the location for this return point was also hardwired, but this doesn’t work for recursive functions for the same reasons that we cannot have a single location for local variables.

When we call recursively, Python will put the information it needs for each function call—local variables and the return location—on the stack and grow it as needed, see [@fig:growing-call-stack].

![Growing the call stack in recursive calls to `factorial`.](figures/growing-call-stack){#fig:growing-call-stack}

When we reach $n=1$, we have a base case and can return a result, 1. Now, Python needs to do two things. It needs to go to the place in the program pointed to by the return location, obviously, but it also needs to store the result of the function call somewhere. We haven’t thought about where Python stores results of expressions before, we just assumed that it could remember them somehow, but of course, on a computer you need to store intermediate results of expressions somewhere. Since results of (local) expressions are local to a function call, the only appropriate place is on the stack.^[Conceptually, all local results end up on the stack. In an actual program, you want to avoid putting results in main memory since it is much faster to access registers on the CPU. So your programming language will try to allocate registers instead of stack locations when possible. This all happens under the hood, and you do not need to worry about it. Conceptually, all local results go on the stack.] When we return from the recursive call, we first remove the call frame for that call and then put the result there on the stack instead. When we put the result of the call on the stack, the stack pointer needs to be moved up. If we didn’t do this, then another function call would overwrite it. We do not call other functions before we have used the result of the recursive call for `factorial`, but this would not be the case when computing Fibonacci numbers. Here we need two recursive calls the results of which we need to add together. We need to store the result of the first call while executing the second.

We keep doing the same thing while we return from the recursive calls. We replace the call frame with the result of the call, see [@fig:shrinking-call-stack]. These intermediate results are part of the call frame—they are local to the individual function calls—and they will also be removed from the stack when the function returns.

![Shrinking the call stack when returning from recursive calls to `factorial`.](figures/shrinking-call-stack){#fig:shrinking-call-stack}

Once we have returned from the last function call, the final result is still on the stack. It will be removed from there when Python uses this result (or simply be removed if we never use the result).

The call stack is not only used for recursion. It works the same way with all function calls. Consider this program:

```python
def add_one(x):
	return x + 1

def add_two(x):
	return add_one(add_one(x))

add_two(1)
```

[@Fig:call-stack-add-two] shows the call stack when evaluating this program. The call to `add_two` will put a return location and the local variable `x` on the stack. This function calls `add_one` that will put a return location and another `x` on the call stack. The first call to `add_one` is the one that becomes the argument to the second call to `add_one`. This call returns before we do the second call, though, so we do not have call frames for two `add_one` calls at the same time. The result of the first is put on the stack while we call the second. This is different from recursive calls, but the principle is the same.

![Call stack when evaluating `add_two(1)`.](figures/call-stack-add-two){#fig:call-stack-add-two}


**Exercise:** Draw the call stack for computing the fourth Fibonacci number using the implementation you did in the previous exercise.

All this call stack business can look complicated, but the good news is that you never need to worry about it unless you need to implement recursion yourself. The call stack is the reason why recursive function calls are possible, but you only need to know that they are. Well, you *almost* never have to worry about the call stack. You might run into problems with a call stack if you fill it up. If you do something like this:

```python
def f(x):
	return f(x + 1)
f(1)
```

you will get an error that says “RecursionError: maximum recursion depth exceeded”. This happens because the memory set aside for the call stack is limited and if the recursion gets too deep, there is no more stack available for more stack frames. This doesn’t happen if you use loops instead of recursion, and is another reason, besides efficiency, to prefer loops over recursion. Of course, in this particular example, there is no way to compute a value in finite time. The function never terminates, so it is not a proper recursive function in the first place, but there are cases where you have a perfectly well-defined recursive function that just needs more stack space than you have available. If that is the case, you need to replace the recursion with a loop.

### Recursion and iteration

There is a close correspondence between recursion and iteration (or loops). You can always directly translate a loop into recursive function. You cannot always do the opposite—translate a recursive function into a loop. The recursion stack is more powerful than simple iterations, so you can do more with a stack than you can with a loop.^[Obviously, you can implement the stack functionality yourself and then avoid recursive function calls, but this is just an implementation detail. You will still be using recursion and not a simple loop.] Some recursions, however, can be directly translated into loops. These are called *tail-recursive*. We will get to these in a moment.

Just because you can implement all loops as recursive function calls doesn’t mean that you should. There is a substantial overhead in calling functions, so a recursive solution to a problem will always be slower than one that relies on loops.^[Programming languages that do not allow loops but only recursive function calls actually translate recursion into loops under the hood whenever possible. Python does not do such optimisations of recursive functions, so you should always prefer loops over recursions when you can.] If you can solve a problem directly using loops, you should do that. Sometimes, however, it is easier to first derive a recursive solution to a problem and then translate it into a loop if possible. Divide and conquer algorithms are easiest to think about as recursive, but some can be translated into loop-versions, also know as iterative algorithms. If lists are the most complex data structure we use in an algorithm, then we can usually solve problems directly using loops, when this is possible, and it doesn’t help us much to first derive recursive solutions. With more complex data structures, however, recursive solutions are often simpler to derive than iterative ones.

The purpose of this section is not to convince you that recursion is a better tool than iteration. If we can implement an algorithm using iteration, then that is the better choice. When we cannot, then recursion is the only choice. We see examples of this when we discuss divide and conquer. The purpose of this section is to get you familiarised with recursion, on simple problems, so you are well equipped to handle recursion when we consider more complex problems.

We will take some problems we have previously handled using loops and translate them into recursive function solutions. I will handle the first, and leave the rest for you to do as exercises.

The case I will implement is merging. Given two sorted lists, `x` and `y`, we want to compute the merge of the two, i.e., a list that contains the same elements as in `x` and `y`, combined, in sorted order.

We can implement this using a loop in this way:

```python
def merge(x, y):
	result = []
	i, j = 0, 0
	while True:
		if i == len(x):
			# no more elements in x
			while j < len(y):
				result.append(y[j])
				j += 1
			return result
		if j == len(y):
			# no more elements in y
			while i < len(x):
				result.append(x[i])
				i += 1
			return result
		if x[i] < y[j]:
			result.append(x[i])
			i += 1
		else:
			result.append(y[j])
			j += 1
```

The function doesn’t do anything complicated, but it is rather long, and therefore it can be hard to see at a glance what it is doing. What it does is simple enough. We move through `x` and `y`, using the indices `I` and `j`, and pick the smallest of `x[I]` and `y[j]` and and append that to our result. If we have made it to the end of either `x` or `y`, the first two `if`-statements in the loop, we copy the remainder of the other list.

A much simpler implementation of the same idea is this:

```python
def merge(x, y):
	if len(x) == 0:	return y
	if len(y) == 0:	return x
	if x[0] < y[0]:
		return [x[0]] + merge(x[1:], y)
	else:
		return [y[0]] + merge(x, y[1:])
```

Here we can directly see the two base cases and the recursive case—the recursive case is one of two recursive calls, depending on which list has the smallest element, but it is only one recursive call.

This version is shorter and simpler, and because of that, we would prefer it over the former version, all else being equal. Unfortunately, all else is not equal. For reasons I have not explained yet, getting everything except the first element of a list, as we do when we call `x[1:]` and `y[1:]`, is an expensive operation. It takes time proportional to the length of the lists we slice the first element off (minus one). There is another implementation fo lists than the one that Python use where this would be a constant time operation, but for Python `list` objects it is not. Therefore, the recursive call takes time $O(n)$, where the lengths of `x` and `y` are in $O(n)$, plus how long it might take to compute the recursive function, and the result is is an $O(n^2)$ running time all in all. I won’t go into details about why we get this running time, since we cover that in the section on divide and conquer later. The first `merge` implementation runs in time $O(n)$—if you cannot see why immediately, try to work through the analysis.

We can get rid of the expensive slicing of the first elements by reintroducing the index variables and get this implementation:

```python
def merge(x, y, i = 0, j = 0):
	if i == len(x): return y[j:]
	if j == len(y):	return x[i:]
	if x[i] < y[j]:
		return [x[i]] + merge(x, y, i + 1, j)
	else:
		return [y[j]] + merge(x, y, i, j + 1)
```

Unfortunately, this isn’t much better. We avoid the slicing, but concatenating two lists, as we do in the recursive case, is also an $O(n)$ operation, so we end up with the same $O(n^2)$ running time.

To avoid both concatenation and slicing, we can do this:

```python
def merge(x, y, i = 0, j = 0, result = []):
	if i == len(x):
		# no more elements in x
		while j < len(y):
			result.append(y[j])
			j += 1
		return result
	if j == len(y):
		# no more elements in y
		while i < len(x):
			result.append(x[i])
			i += 1
		return result
	if x[i] < y[j]:
		result.append(x[i])
		return merge(x, y, i + 1, j, result)
	else:
		result.append(y[j])
		return merge(x, y, i, j + 1, result)
```

This leaves us pretty much back where we started. We now have a recursive solution to the problem, but it is not simpler than the iterative we started with.

All is not lost, however. We can reconsider why we couldn’t use the simpler recursive solution. The main problem here was concatenation—we could avoid the slicing simply by using indices. Maybe we can avoid the concatenation in some other way. Indeed we can:

```python
def merge_rec(x, y, i = 0, j = 0):
	if i == len(x):	return y[j:]
	if j == len(y):	return x[i:]
	if x[i] < y[j]:
		res = merge_rec(x, y, i + 1, j)
		res.append(x[i])
		return res
	else:
		res = merge_rec(x, y, i, j + 1)
		res.append(y[j])
		return res

def merge(x, y):
	return list(reversed(merge_rec(x, y)))
```

Since prepending one element to a list involves a concatenation operation, which is expensive, we replace it with an append operation, which is cheap. We construct the merged list in the wrong order, so we need to sort it once we are done. I have split this into two functions, one that recursively construct the reversed result and one that reverses. In the basis cases we still slice a list, but since this takes time proportional to the length of the list, it is not slower than the `while`-loops we used earlier to do the same thing. In fact, it is likely to be faster since slicing is a built-in operation in Python and implemented very efficiently.

This solution is not quite as simple as the first recursive function, but we can make it almost so by making the append operation a function call:

```python
def app(lst, x):
	lst.append(x)
	return lst

def merge_rec(x, y, i = 0, j = 0):
	if i == len(x):	return y[j:]
	if j == len(y):	return x[i:]
	if x[i] < y[j]:
		return app(merge_rec(x, y, i + 1, j), x[i])
	else:
		return app(merge_rec(x, y, i, j + 1), y[j])
```

This solution is simpler than the first we had, almost as simple as the initial recursive one, and it runs in $O(n)$ since we have replaced the expensive operations in the recursive case with constant time operations. It is not as efficient as the first function we wrote. Function calls are expensive, and we use those extensively here, where the first solution didn’t use any function calls beyond the `merge` call needed to merge the two lists. We also need to reverse the result, which adds additional computations. 

In the next section, we will start from a recursive solution and use that to guide us to an iterative solution. We will end up with the same solution as we had before, so we will not get a better or simpler solution. The recursive solution is simple and by starting from that and getting to the iterative one is often an easier approach. It can be hard to design the iterative solution directly, but by starting from a simple recursive solution we can get it almost automatically.

Before we get to that, however, you should do some exercises to test that you have understood recursion.

**Exercise:** To compute the sum of the elements in a list, we can obviously do this iteratively:

```python
result = 0
for e in x:
  result += e
```

Implement a recursive function that computes the sum of the elements of a list.

**Exercise:** We can find the smallest element in a non-empty list, `x`, like this:

```python
smallest = x[0]
for e in x:
	smallest = min(smallest, e)
```

Write a recursive function for finding the smallest element in a list. To avoid copying the list using slices, you will want to have the function take an index parameter as an argument.

**Exercise:** Modify your function so it returns `None` if the list is not empty. The easiest way to do this is probably to include the “smallest element seen so far” as a parameter to the function, with a default value of `None`. To compute the smallest value and still handle `None` you can use this function:

```python
def my_min(x, y):
	return y if x is None else min(x, y)
```

**Exercise:** Write a recursive function that reverses a list.

**Exercise:** Recall the exercise where you had to translate a base-10 number into some other base $b$ (where we restricted the base to be less than 16). We can get the last digit of a number $i$, in base $b$ using this function:

```python
def get_last_digit(i, b):
    return digits[i % b]
```

where we defined the `digits` list as

```python
digits = {}

for i in range(0,10):
    digits[i] = str(i)

digits[10] = 'A'
digits[11] = 'B'
digits[12] = 'C'
digits[13] = 'D'
digits[14] = 'E'
digits[15] = 'F'
```

We can then reduce the problem to the second-to-last digit by dividing $i$ by $b$. Implement this idea using a recursive function.

### Tail-recursion

You can always translate an iterative algorithm into a recursive one, but since iterative algorithms are more efficient, you shouldn’t do this. Recursive algorithms are simpler, though, so you will often find yourself in the situation that you have an elegant recursive solution to a problem, and you want to translate it into a more efficient iterative solution. You cannot always translate a recursive function into an iterative one,[^iterative_is_always_possible] but this section is about the cases where you can.

[^iterative_is_always_possible]: In the interest of complete honesty, I am lying here. You can always translate a recursive function into an iterative one. It just requires some tricks we are not ready for here. It usually isn’t a particularly good idea; it is not efficient and you can solve such problems more efficiently by implementing your own stack as a substitute for the recursion stack. It is possible, though. It is just a lot more involved than the cases we consider in this chapter.

Functions that can always be translated into loops are so-called *tail recursive* functions. In many programming languages, tail recursive functions are automatically translated into loops—this is called the *tail recursive optimisation*—but Python is not one of them. Not to worry, though, the translation is so simple that you can always do it by hand with very little effort.

A function is *tail recursive* when the recursive case is only a recursive call. Consider the factorial function:

```python
def factorial(n):
	if n == 1:
		return 1
	else:
		return n * factorial(n - 1)
```

The recursive case involves a recursive call and we then multiply the result of this call to `n`. Because we have to multiply the result of the recursive call with `n`, the function is not tail recursive. We can translate it into a tail recursive function by adding an accumulator to the function:

```python
def factorial(n, acc = 1):
	if n == 1:
		return acc
	else:
		return factorial(n - 1, n * acc)
```

The accumulator handles the multiplication with `n`. We multiply the accumulator by `n` as we go down the recursion rather than multiply the result of recursive calls by `n`. Functions that only involve a single recursive call in the recursive case can always be translated into tail recursive versions by adding an accumulator.

**Exercise:** Rewrite your recursive function for computing the sum of a list of numbers so it becomes tail recursive.

**Exercise:** Rewrite your recursive function for finding the smallest element in a list to a version that is tail recursive.

With tail recursive functions, we do not need to do anything with the result of the recursive call. Not doing anything with the result of a recursive call is just another way of saying that a function is tail recursive. The reason that this is important is that, when we do not need to do anything after the recursive call, then we can reuse the call frame for the recursive call. We can simply update the local variables to those we would use in the recursive call frame and go from there; we can replace a recursive call with a simple update of the function argument local variables. When we call a function we assign values to the function arguments. If we have a tail recursive function, we can simply update the arguments we already have and then start executing the function body from the beginning again. If we wrap the function body in one big `while True` loop, we can replace the recursive function call an update to the function arguments and then `continue` the loop. If the recursive case is put at the end of the loop, we do not even need to `continue`; we are at the end of the loop so we return to the beginning right after we update the variables.

For the factorial function, this transformation gives us:

```python
def factorial(n):
	acc = 1
	while True:
		if n == 1:
			return acc
		n, acc = n - 1, n * acc
```

If you split the variable updates over multiple statements, you have to be careful about the order. When you update a variable, you affect expressions that depend on it. So you have to update the variables in the right order.

This will work

```python
def factorial(n):
	acc = 1
	while True:
		if n == 1:
			return acc
		acc = n * acc
		n = n - 1
```

This will not:

```python
def factorial(n):
	acc = 1
	while True:
		if n == 1:
			return acc
		n = n - 1
		acc = n * acc
```

A parallel assignment, as we did for the first iterative implementation of the factorial function, will usually work. If we never do any operations with side-effects, i.e., whenever we need to update a data structure such as a list, we create a new one instead, then parallel assignment will work. If we actually modify a data structure, we cannot use parallel assignment so we must be careful that we perform the update operations in the same order as they would have been performed in a function call.

**Exercise:** Do this transformation for your tail recursive summation function.

**Exercise:** Do this transformation for your tail recursive “find minimum” function.

**Exercise:** Consider our recursive implementation of binary search:

```python
def bsearch(x, e, low = 0, high = len(x)):
	if low >= high:
		return False
	mid = (low + high) // 2
	if x[mid] == e:
		return True
	elif x[mid] < e:
		return bsearch(x, e, mid + 1, high)
	else:
		return bsearch(x, e, low, mid)
```

This function is tail recursive, so use the transformation to replace it with a loop. Compare it to the iterative solution we considered before this chapter.

To see a more complex case of using an accumulator in a tail-recursive function, and then translate it into an iterative function, we can return to the problem of merging two lists. We left this problem with the recursive implementation below:

```python
def app(lst, x):
	lst.append(x)
	return lst

def merge_rec(x, y, i = 0, j = 0):
	if i == len(x):	return y[j:]
	if j == len(y):	return x[i:]
	if x[i] < y[j]:
		return app(merge_rec(x, y, i + 1, j), x[i])
	else:
		return app(merge_rec(x, y, i, j + 1), y[j])

def merge(x, y):
	return list(reversed(merge_rec(x, y)))
```

The reason we had to construct the merged list in reverse order, and then reverse it when we are done, was actually because we didn't use an accumulator. Because of this, we had to build the list by combining a recursive call with the front of one of the lists in the recursive case. If we add an accumulator, we can build the merged list in the right order:

```python
def merge(x, y, i = 0, j = 0, acc = None):
	if acc is None:
		acc = []
	if i == len(x):	return acc + y[j:]
	if j == len(y):	return acc + x[i:]
	if x[i] < y[j]:
		return merge(x, y, i + 1, j, app(acc, x[i]))
	else:
		return merge(x, y, i, j + 1, app(acc, y[j]))
```

The way we handle the default value of the accumulator might look a bit weird, but it is important. If we set the default value of `acc` to an empty list, each call to `merge` that rely on the default parameter will get the *same* list. This means that if you call `merge` twice, the result of the first call will still be in the accumulator, and the new merge will be appended to it. This is not what we want, and it is because of this that we handle the default parameter the way we do.

This function is tail recursive so we can translate it into a looping version. The `app` function simply append its second argument to its first, and it does this before the recursive call (because function arguments are evaluated before a function is called). Because of this, we can get rid of it and simply append instead. We have to be careful to append before we update the indices, though. The rewritten function looks like this:

```python
def merge(x, y, i = 0, j = 0, acc = None):
	if acc is None:
		acc = []
	while True:
		if i == len(x):	return acc + y[j:]
		if j == len(y):	return acc + x[i:]
		if x[i] < y[j]:
			acc.append(x[i])
			i += 1
		else:
			acc.append(y[j])
			j += 1
```

If you want to avoid copying the accumulator in the basis cases, you can use the `extend` method on the accumulator list.  Using `extend` and a slice on one of the input lists is unlikely to be slower than a `while`-loop where we move individual elements, since `extend` and slice are builtin operations and therefore highly optimised.

```python
def merge(x, y, i = 0, j = 0, acc = None):
	if acc is None:
		acc = []
	while True:
		if i == len(x):
			acc.extend(y[j:])
			return acc
		if j == len(y):
			acc.extend(x[i:])
			return acc
		if x[i] < y[j]:
			acc.append(x[i])
			i += 1
		else:
			acc.append(y[j])
			j += 1
```

## Divide and conquer

Divide and conquer is the algorithmic version of recursion. The term comes from the political doctrine *divide et impera*, but for algorithms, a more correct description would be *divide and combine*. The key idea is to

1. Split a problem into subproblems of the same type.
2. Recursively solve these problems.
3. Combine the results of the recursive calls to a solution of the original problem.

Components 1 and 3 can be very simple or very complex, while 2 is usually one or two recursive calls.

The binary search algorithm, we have seen several times by now, is an example of a divide and conquer algorithm. Step 1 in this algorithm is identifying whether we should search to the left or to the right of the midpoint, the recursive step is searching in one of these intervals. Step 3 is almost non-existing, since we simply return the result of the recursive solution in step 2.

The recursive step(s) in divide and conquer are often implemented as recursive function calls, but need not be. Conceptually, we recurse, but as we saw in binary search, we can replace recursive calls with loops. It is not necessary to use recursion in your implementation of a divide and conquer algorithm; the key component of this class of algorithms is that we solve a subproblem of the same type as the original problem. Since we are using recursion, even if it is only conceptually, we need to have basis cases and recursive cases. The basis case in binary search is when we have an empty interval or when the midpoint is the element we are looking for. The recursive case handles everything else.

As another example of divide and conquer, we can consider a sorting algorithm known as *merge sort*. This algorithm works as follows:

1. Split the initial input into two pieces of half the size of the original problem: the first and the second half of the input list.
2. Sort these two smaller lists recursively.
3. Combine the two sorted lists using merge.

This algorithm involves two recursive subproblems, so it is not easy to implement it as an iterative solution. We will implement it recursively. The basis cases for the recursion are when we have empty lists or lists of length one—these will be lists that are already sorted. The recursive case handles everything else.




```python
def merge_sort(x):
	if len(x) <= 1: return x
	mid = len(x) // 2
	return merge(merge_sort(x[:mid]), merge_sort(x[mid:]))
```

```python
def merge_sort_rec(x, low, high):
	if high - low <= 1: return x[low:high]
	mid = (low + high) // 2
	return merge(merge_sort_rec(x, low, mid), 
		         merge_sort_rec(x, mid, high))

def merge_sort(x):
	return merge_sort_rec(x, 0, len(x))
```

```python
def inplace_merge(x, i, j, k, l):
	# invariant: i <= j <= k <= l
	if i == j or k == l: return # nothing left to be done
	if x[i] < x[k]:
		inplace_merge(x, i + 1, j, k, l)
	else:
		x[i], x[k] = x[k], x[i]
		inplace_merge(x, i + 1, j, k, l)
```

```python
def inplace_merge(x, i, j, k, l):
	while True:
		# invariant: i <= j <= k <= l
		if i == j or k == l: return # nothing left to be done
		if x[i] < x[k]:
			i += 1
		else:
			x[i], x[k] = x[k], x[i]
			i += 1
```

```python
def merge_sort_rec(x, low, high):
	if high - low <= 1: return
	mid = (low + high) // 2
	merge_sort_rec(x, low, mid)
	merge_sort_rec(x, mid, high)
	inplace_merge(x, low, mid, mid, high)
	
def merge_sort(x):
	merge_sort_rec(x, 0, len(x))
```

