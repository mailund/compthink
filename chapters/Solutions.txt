# Solutions to exercises

Here, at the end of the book, I present my own solutions to the exercises in the previous chapters. For many of the exercises there are more than one way to solve them, and mine are no better than yours. If you have solved an exercise in a different way, you might still learn from seeing my solution. If you get stuck on a problem, you can use my solutions to get hints of how to progress with your own. If you have already solved a problem, you can compare it with my solution to check if it can be solved more elegantly. If you think you have a better solution, I would love to see it, so please email me about it.

Since I present the solutions to all exercises here, I must caution you against skipping the exercises and just looking at the solutions. I know it can be very tempting to just flip to the solutions whenever there is an exercise. You must fight that temptation. The point of doing exercises is that it forces you to think more deeply about the topics you are learning. I have solved many problems in the main text, so you have already seen how I solve problems multiple times. It can be deceptively easy to follow a solution to a problem, and it does not compare to working through a problem yourself. The latter forces you to think more deeply about an issue and tests that you have fully understood a topic. I urge you to always try solving a problem yourself before looking at my answers.

Now, without further ado, I present my solutions.

## Introduction to algorithms

### Above or below

```python
for guess in range(20,0,-1):
    result = input_selection(
        "How is my guess {}?".format(guess), 
        ["low", "hit", "high"]
    )
    if result == "hit":
        print("Wuhuu!")
        break
    else:
        print("I must have been too hight, right? ", result)
```

```python
lower_bound = 1
upper_bound = 20
while True:
    guess = (upper_bound + lower_bound) // 2
    result = input_selection(
        "How is my guess {}?".format(guess),
        ["low", "hit", "high"]
    )
    if result == "hit":
        print("Wuhuu!")
        break
    elif result == "low":
        lower_bound = guess + 1
    else:
        upper_bound = guess - 1
```


### Finding square roots

**FIXME: solution:**

```python
def babylonian_sqrt(S, epsilon):
    lower_bound = 0
    upper_bound = S
    x = upper_bound / 2
    while (upper_bound - lower_bound) > epsilon:
        x = (lower_bound + upper_bound) / 2
        if x**2 > S:
            lower_bound = S/x
            upper_bound = x
        else:
            lower_bound = x
            upper_bound = S/x
    return x

babylonian_sqrt(2, 1e-5)
```


### Changing numerical base

```python
def print_base(n, b):
    base_b = []
    while n > 0:
        base_b.append(digits[n % b])
        n //= b
    print("".join(base_b[::-1]))
```

### The sieve of Eratosthenes

```python
def eratosthenes(n):
    candidates = list(range(2, n+1))
    primes = []
    while len(candidates) > 0:
        p = candidates[0]
        candidates = [m for m in candidates if m % p != 0]
        primes.append(p)
    return primes
```


